% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/02_method_textTransform.R
\docType{methods}
\name{textTransform}
\alias{textTransform}
\alias{textTransform,kRp.taggedText-method}
\title{Letter case transformation}
\usage{
textTransform(txt, ...)

\S4method{textTransform}{kRp.taggedText}(txt, scheme, p = 0.5,
  paste = FALSE, var = "wclass", query = "fullstop",
  method = "replace", replacement = ".", ...)
}
\arguments{
\item{txt}{An object of class \code{\link[koRpus:kRp.txt.trans-class]{kRp.txt.trans}},
      \code{\link[koRpus:kRp.tagged-class]{kRp.tagged}},
\code{\link[koRpus:kRp.txt.freq-class]{kRp.txt.freq}} or \code{\link[koRpus:kRp.analysis-class]{kRp.analysis}}.}

\item{...}{Parameters passed to \code{\link[koRpus:query]{query}} to find matching tokens. Relevant only if \code{scheme="normalize"}.}

\item{scheme}{One of the following character strings:
\itemize{
  \item {\code{"minor"}} {Start each word with a lowercase letter.}
  \item {\code{"all.minor"}} {Forces all letters into lowercase.}
  \item {\code{"major"}} {Start each word with a uppercase letter.}
  \item {\code{"all.major"}} {Forces all letters into uppercase.}
  \item {\code{"random"}} {Randomly start words with uppercase or lowercase letters.}
  \item {\code{"de.norm"}} {German norm: All names,
      nouns and sentence beginnings start with an uppercase letter,
     anything else with a lowercase letter.}
  \item {\code{"de.inv"}} {Inversion of \code{"de.norm"}.}
  \item {\code{"eu.norm"}} {Usual European cases: Only names and sentence beginnings start with an uppercase letter,
     anything else with a lowercase letter.}
  \item {\code{"eu.inv"}} {Inversion of \code{"eu.norm"}.}
  \item {\code{"normalize"}} {Replace all tokens matching \code{query} in column \code{var} according to \code{method} (see below).}
 }}

\item{p}{Numeric value between 0 and 1. Defines the probability for upper case letters (relevant only
if \code{scheme="random"}).}

\item{paste}{Logical, see value section.}

\item{var}{A character string naming a variable in the object (i.e.,
      colname). See \code{\link[koRpus:query]{query}} for details.
Relevant only if \code{scheme="normalize"}.}

\item{query}{A character vector (for words), regular expression,
      or single number naming values to be matched in the variable.
See \code{\link[koRpus:query]{query}} for details. Relevant only if \code{scheme="normalize"}.}

\item{method}{One of the following character strings:
\itemize{
  \item {\code{"shortest"}} {Replace all matches with the shortest value found.}
  \item {\code{"longest"}} {Replace all matches with the longest value found.}
  \item {\code{"mean"}} {Replace all matches with a pseudo token generated from all values found,
      with average length.}
  \item {\code{"replace"}} {Replace all matches with the token given via \code{replacement}.}
}
Relevant only if \code{scheme="normalize"}.}

\item{replacement}{Character string defining the exact token to replace all query matches with.
Relevant only if \code{scheme="normalize"} and \code{method="replace"}.}
}
\value{
By default an object of class \code{\link[koRpus:kRp.txt.trans-class]{kRp.txt.trans}} is returned. If \code{paste=TRUE},
      returns
   an atomic character vector (via \code{\link[koRpus:pasteText]{pasteText}}).
}
\description{
Transforms text in koRpus objects token by token.
}
\details{
This method is mainly intended to produce text material for experiments.
}
\examples{
\dontrun{
tagged.text.obj <- freq.analysis("/some/text.txt", corp.freq=my.LCC.data)
textTransform(tagged.text.obj, scheme="random", paste=TRUE)
}
}
\keyword{misc}
